/// <reference types="node" />
import { ClientParams } from '../create-cma-http-client';
import { DefaultParams } from './wrappers/wrap';
export type { DefaultParams } from './wrappers/wrap';
export declare type PlainClientAPI = ReturnType<typeof createPlainClient>;
export declare const createPlainClient: (params: ClientParams, defaults?: DefaultParams | undefined) => {
    raw: {
        getDefaultParams: () => DefaultParams | undefined;
        get: <T = unknown>(url: string, config?: import("axios").AxiosRequestConfig | undefined) => Promise<T>;
        post: <T_1 = unknown>(url: string, payload?: any, config?: import("axios").AxiosRequestConfig | undefined) => Promise<T_1>;
        put: <T_2 = unknown>(url: string, payload?: any, config?: import("axios").AxiosRequestConfig | undefined) => Promise<T_2>;
        delete: <T_3 = unknown>(url: string, config?: import("axios").AxiosRequestConfig | undefined) => Promise<T_3>;
        http: <T_4 = unknown>(url: string, config?: import("axios").AxiosRequestConfig | undefined) => Promise<T_4>;
    };
    editorInterface: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").EditorInterfaceProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").EditorInterfaceProps>>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").EditorInterfaceProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").EditorInterfaceProps>;
    };
    space: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>) => Promise<import("../export-types").SpaceProps>;
        getMany: (params: Pick<import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").QueryParams, never>>) => Promise<import("../common-types").CollectionProp<import("../export-types").SpaceProps>>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>, rawData: import("../export-types").SpaceProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").SpaceProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>) => Promise<any>;
        create: (params: Pick<{
            organizationId?: string | undefined;
        }, never> & Partial<Pick<{
            organizationId?: string | undefined;
        }, "organizationId">>, rawData: Pick<import("../export-types").SpaceProps, "name">, headers?: Record<string, unknown> | undefined) => Promise<any>;
    };
    environment: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, "spaceId" | "environmentId">>) => Promise<import("../export-types").EnvironmentProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").PaginationQueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").PaginationQueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").EnvironmentProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>, rawData: Partial<Pick<import("../export-types").EnvironmentProps, "name">>, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").EnvironmentProps>;
        createWithId: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            sourceEnvironmentId?: string | undefined;
        }, "sourceEnvironmentId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            sourceEnvironmentId?: string | undefined;
        }, "spaceId" | "environmentId">>, rawData: Partial<Pick<import("../export-types").EnvironmentProps, "name">>, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").EnvironmentProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, "spaceId" | "environmentId">>, rawData: import("../export-types").EnvironmentProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").EnvironmentProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, "spaceId" | "environmentId">>) => Promise<any>;
    };
    environmentAlias: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            environmentAliasId: string;
        }, "environmentAliasId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            environmentAliasId: string;
        }, "spaceId">>) => Promise<import("../export-types").EnvironmentAliasProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").PaginationQueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").PaginationQueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").EnvironmentAliasProps>>;
        createWithId: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            environmentAliasId: string;
        }, "environmentAliasId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            environmentAliasId: string;
        }, "spaceId">>, rawData: Pick<import("../export-types").EnvironmentAliasProps, "environment">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").EnvironmentAliasProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            environmentAliasId: string;
        }, "environmentAliasId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            environmentAliasId: string;
        }, "spaceId">>, rawData: import("../export-types").EnvironmentAliasProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").EnvironmentAliasProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            environmentAliasId: string;
        }, "environmentAliasId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            environmentAliasId: string;
        }, "spaceId">>) => Promise<any>;
    };
    contentType: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        } & import("./endpoints/common-types").QueryParams, "query" | "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        } & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../export-types").ContentTypeProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").ContentTypeProps>>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").ContentTypeProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").ContentTypeProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "spaceId" | "environmentId">>) => Promise<any>;
        publish: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").ContentTypeProps) => Promise<import("../export-types").ContentTypeProps>;
        unpublish: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").ContentTypeProps>;
        omitAndDeleteField: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "spaceId" | "environmentId">>, contentType: import("../export-types").ContentTypeProps, fieldId: string) => Promise<import("../export-types").ContentTypeProps>;
    };
    user: {
        getManyForSpace: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").UserProps>>;
        getForSpace: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            userId: string;
        }, "userId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            userId: string;
        }, "spaceId">>) => Promise<import("../export-types").UserProps>;
        getCurrent: (params?: import("./endpoints/common-types").QueryParams | undefined) => Promise<import("../export-types").UserProps>;
        getForOrganization: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & {
            userId: string;
        }, "userId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & {
            userId: string;
        }, "organizationId">>) => Promise<import("../export-types").UserProps>;
        getManyForOrganization: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").UserProps>>;
    };
    entry: {
        getMany: <T_5 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").EntryProps<T_5>>>;
        get: <T_6 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        } & import("./endpoints/common-types").QueryParams, "query" | "entryId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        } & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../export-types").EntryProps<T_6>>;
        update: <T_7 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "entryId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").EntryProps<T_7>, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").EntryProps<T_7>>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "entryId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "spaceId" | "environmentId">>) => Promise<any>;
        publish: <T_8 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "entryId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").EntryProps<T_8>) => Promise<import("../export-types").EntryProps<T_8>>;
        unpublish: <T_9 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "entryId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").EntryProps<T_9>>;
        archive: <T_10 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "entryId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").EntryProps<T_10>>;
        unarchive: <T_11 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "entryId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").EntryProps<T_11>>;
        create: <T_12 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        }, "spaceId" | "environmentId">>, rawData: Pick<import("../export-types").EntryProps<T_12>, "metadata" | "fields">) => Promise<import("../export-types").EntryProps<T_12>>;
        createWithId: <T_13 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
            contentTypeId: string;
        }, "contentTypeId" | "entryId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
            contentTypeId: string;
        }, "spaceId" | "environmentId">>, rawData: Pick<import("../export-types").EntryProps<T_13>, "metadata" | "fields">) => Promise<import("../export-types").EntryProps<T_13>>;
    };
    asset: {
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").AssetProps>>;
        get: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        } & import("./endpoints/common-types").QueryParams, "query" | "assetId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        } & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../export-types").AssetProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "assetId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").AssetProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").AssetProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "assetId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "spaceId" | "environmentId">>) => Promise<any>;
        publish: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "assetId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").AssetProps) => Promise<import("../export-types").AssetProps>;
        unpublish: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "assetId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").AssetProps>;
        archive: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "assetId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").AssetProps>;
        unarchive: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "assetId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").AssetProps>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, "spaceId" | "environmentId">>, rawData: Pick<import("../export-types").AssetProps, "metadata" | "fields">) => Promise<import("../export-types").AssetProps>;
        createWithId: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "assetId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            assetId: string;
        }, "spaceId" | "environmentId">>, rawData: Pick<import("../export-types").AssetProps, "metadata" | "fields">) => Promise<import("../export-types").AssetProps>;
        createFromFiles: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, "spaceId" | "environmentId">>, data: Pick<import("../export-types").AssetFileProp, "fields">) => Promise<import("../export-types").AssetProps>;
        processForAllLocales: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, "spaceId" | "environmentId">>, asset: import("../export-types").AssetProps, options?: import("../entities/asset").AssetProcessingForLocale | undefined) => Promise<import("../export-types").AssetProps>;
        processForLocale: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, "spaceId" | "environmentId">>, asset: import("../export-types").AssetProps, locale: string, __4?: import("../entities/asset").AssetProcessingForLocale | undefined) => Promise<import("../export-types").AssetProps>;
    };
    upload: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            uploadId: string;
        }, "uploadId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            uploadId: string;
        }, "spaceId">>) => Promise<any>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>, data: {
            file: string | ArrayBuffer | import("stream").Stream;
        }) => Promise<any>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            uploadId: string;
        }, "uploadId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            uploadId: string;
        }, "spaceId">>) => Promise<any>;
    };
    locale: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            localeId: string;
        }, "localeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            localeId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").LocaleProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").LocaleProps>>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            localeId: string;
        }, "localeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            localeId: string;
        }, "spaceId" | "environmentId">>) => Promise<any>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            localeId: string;
        }, "localeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            localeId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").LocaleProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").LocaleProps>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, "spaceId" | "environmentId">>, data: Pick<{
            code: string;
            name: string;
            internal_code: string;
            fallbackCode: string | null;
            optional?: boolean | undefined;
            default?: boolean | undefined;
            contentDeliveryApi?: boolean | undefined;
            contentManagementApi?: boolean | undefined;
        }, "optional" | "default" | "code" | "name" | "fallbackCode" | "contentDeliveryApi" | "contentManagementApi">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").LocaleProps>;
    };
    personalAccessToken: {
        get: (params: Pick<{
            tokenId: string;
        }, "tokenId"> & Partial<Pick<{
            tokenId: string;
        }, never>>) => Promise<import("../export-types").PersonalAccessTokenProp>;
        getMany: (params: Pick<import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").QueryParams, never>>) => Promise<import("../common-types").CollectionProp<import("../export-types").PersonalAccessTokenProp>>;
        create: (rawData: Pick<import("../export-types").PersonalAccessToken, "name" | "scopes">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").PersonalAccessTokenProp>;
        revoke: (params: Pick<{
            tokenId: string;
        }, "tokenId"> & Partial<Pick<{
            tokenId: string;
        }, never>>) => Promise<import("../export-types").PersonalAccessTokenProp>;
    };
    usage: {
        getManyForSpace: (params: Pick<{
            organizationId: string;
        } & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<{
            organizationId: string;
        } & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").UsageProps>>;
        getManyForOrganization: (params: Pick<{
            organizationId: string;
        } & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<{
            organizationId: string;
        } & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").UsageProps>>;
    };
    role: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            roleId: string;
        }, "roleId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            roleId: string;
        }, "spaceId">>) => Promise<import("../export-types").RoleProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").RoleProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>, data: Pick<import("../export-types").RoleProps, "description" | "name" | "permissions" | "policies">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").RoleProps>;
        createWithId: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            roleId: string;
        }, "roleId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            roleId: string;
        }, "spaceId">>, data: Pick<import("../export-types").RoleProps, "description" | "name" | "permissions" | "policies">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").RoleProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            roleId: string;
        }, "roleId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            roleId: string;
        }, "spaceId">>, rawData: import("../export-types").RoleProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").RoleProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            roleId: string;
        }, "roleId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            roleId: string;
        }, "spaceId">>) => Promise<any>;
    };
    scheduledActions: {
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").ScheduledActionProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>, data: Pick<import("../export-types").ScheduledActionProps, "environment" | "action" | "entity" | "scheduledFor">) => Promise<import("../export-types").ScheduledActionProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            scheduledActionId: string;
        }, "scheduledActionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            scheduledActionId: string;
        }, "spaceId">>) => Promise<any>;
    };
    previewApiKey: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            previewApiKeyId: string;
        }, "previewApiKeyId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            previewApiKeyId: string;
        }, "spaceId">>) => Promise<import("../export-types").PreviewApiKeyProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").PreviewApiKeyProps>>;
    };
    apiKey: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            apiKeyId: string;
        }, "apiKeyId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            apiKeyId: string;
        }, "spaceId">>) => Promise<import("../export-types").ApiKeyProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").ApiKeyProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>, data: Pick<import("../export-types").ApiKeyProps, "description" | "name" | "environments">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").ApiKeyProps>;
        createWithId: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            apiKeyId: string;
        }, "apiKeyId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            apiKeyId: string;
        }, "spaceId">>, data: Pick<import("../export-types").ApiKeyProps, "description" | "name" | "environments">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").ApiKeyProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            apiKeyId: string;
        }, "apiKeyId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            apiKeyId: string;
        }, "spaceId">>, rawData: import("../export-types").ApiKeyProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").ApiKeyProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            apiKeyId: string;
        }, "apiKeyId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            apiKeyId: string;
        }, "spaceId">>) => Promise<any>;
    };
    appDefinition: {
        get: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & {
            appDefinitionId: string;
        } & import("./endpoints/common-types").QueryParams, "query" | "appDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & {
            appDefinitionId: string;
        } & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../export-types").AppDefinitionProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").AppDefinitionProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetOrganizationParams, never> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams, "organizationId">>, rawData: {
            name: string;
            parameters?: {
                instance?: import("../export-types").ParameterDefinition[] | undefined;
            } | undefined;
            src?: string | undefined;
            locations?: import("../export-types").AppLocation[] | undefined;
        }) => Promise<import("../export-types").AppDefinitionProps>;
        update: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & {
            appDefinitionId: string;
        }, "appDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & {
            appDefinitionId: string;
        }, "organizationId">>, rawData: import("../export-types").AppDefinitionProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").AppDefinitionProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & {
            appDefinitionId: string;
        }, "appDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & {
            appDefinitionId: string;
        }, "organizationId">>) => Promise<any>;
    };
    appInstallation: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            appDefinitionId: string;
        } & import("./endpoints/common-types").PaginationQueryParams, "query" | "appDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            appDefinitionId: string;
        } & import("./endpoints/common-types").PaginationQueryParams, "spaceId" | "environmentId">>) => Promise<import("../export-types").AppInstallationProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").PaginationQueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").PaginationQueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").AppInstallationProps>>;
        upsert: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            appDefinitionId: string;
        }, "appDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            appDefinitionId: string;
        }, "spaceId" | "environmentId">>, rawData: Pick<import("../export-types").AppInstallationProps, "parameters">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").AppInstallationProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            appDefinitionId: string;
        }, "appDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            appDefinitionId: string;
        }, "spaceId" | "environmentId">>) => Promise<any>;
    };
    extension: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            extensionId: string;
        } & import("./endpoints/common-types").QueryParams, "query" | "extensionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            extensionId: string;
        } & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../export-types").UIExtensionProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").UIExtensionProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams, "spaceId" | "environmentId">>, rawData: import("type-fest").RequireExactlyOne<{
            src?: string | undefined;
            srcdoc?: string | undefined;
            parameters?: {
                instance?: import("../export-types").ParameterDefinition[] | undefined;
                installation?: import("../export-types").ParameterDefinition[] | undefined;
            } | undefined;
            name: string;
            fieldTypes: import("../export-types").FieldType[];
            sidebar: boolean;
        }, "src" | "srcdoc">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").UIExtensionProps>;
        createWithId: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            extensionId: string;
        }, "extensionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            extensionId: string;
        }, "spaceId" | "environmentId">>, rawData: import("type-fest").RequireExactlyOne<{
            src?: string | undefined;
            srcdoc?: string | undefined;
            parameters?: {
                instance?: import("../export-types").ParameterDefinition[] | undefined;
                installation?: import("../export-types").ParameterDefinition[] | undefined;
            } | undefined;
            name: string;
            fieldTypes: import("../export-types").FieldType[];
            sidebar: boolean;
        }, "src" | "srcdoc">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").UIExtensionProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            extensionId: string;
        }, "extensionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            extensionId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").UIExtensionProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").UIExtensionProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            extensionId: string;
        }, "extensionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            extensionId: string;
        }, "spaceId" | "environmentId">>) => Promise<any>;
    };
    webhook: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        }, "webhookDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        }, "spaceId">>) => Promise<import("../export-types").WebhookProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").WebhookProps>>;
        getHealthStatus: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        }, "webhookDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        }, "spaceId">>) => Promise<import("../entities/webhook").WebhookHealthProps>;
        getCallDetails: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        } & {
            callId: string;
        }, "webhookDefinitionId" | "callId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        } & {
            callId: string;
        }, "spaceId">>) => Promise<import("../entities/webhook").WebhookCallDetailsProps>;
        getManyCallDetails: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        } & import("./endpoints/common-types").QueryParams, "query" | "webhookDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        } & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<Pick<import("../entities/webhook").WebhookCallDetailsProps, "sys" | "url" | "statusCode" | "errors" | "eventType" | "requestAt" | "responseAt">>>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>, rawData: {
            name: string;
            url: string;
            topics: string[];
            httpBasicUsername?: string | undefined;
            httpBasicPassword?: string | undefined;
            filters?: import("../export-types").WebhookFilter[] | undefined;
            transformation?: import("../export-types").WebhookTransformation | undefined;
            headers?: import("../entities/webhook").WebhookHeader[] | undefined;
        }, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").WebhookProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        }, "webhookDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        }, "spaceId">>, rawData: import("../export-types").WebhookProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").WebhookProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        }, "webhookDefinitionId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            webhookDefinitionId: string;
        }, "spaceId">>) => Promise<any>;
    };
    snapshot: {
        getManyForEntry: <T_14 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        } & import("./endpoints/common-types").QueryParams, "query" | "entryId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        } & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").SnapshotProps<import("../export-types").EntryProps<T_14>>>>;
        getForEntry: <T_15 extends Record<string, any> = Record<string, any>>(params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        } & {
            snapshotId: string;
        }, "entryId" | "snapshotId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            entryId: string;
        } & {
            snapshotId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").SnapshotProps<import("../export-types").EntryProps<T_15>>>;
        getManyForContentType: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        } & import("./endpoints/common-types").QueryParams, "query" | "contentTypeId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        } & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").SnapshotProps<import("../export-types").ContentTypeProps>>>;
        getForContentType: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        } & {
            snapshotId: string;
        }, "contentTypeId" | "snapshotId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            contentTypeId: string;
        } & {
            snapshotId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").SnapshotProps<import("../export-types").ContentTypeProps>>;
    };
    tag: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            tagId: string;
        }, "tagId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            tagId: string;
        }, "spaceId" | "environmentId">>) => Promise<import("../export-types").TagProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & import("./endpoints/common-types").QueryParams, "spaceId" | "environmentId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").TagProps>>;
        createWithId: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            tagId: string;
        }, "tagId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            tagId: string;
        }, "spaceId" | "environmentId">>, rawData: Pick<import("../export-types").TagProps, "name">) => Promise<import("../export-types").TagProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            tagId: string;
        }, "tagId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            tagId: string;
        }, "spaceId" | "environmentId">>, rawData: import("../export-types").TagProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").TagProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            tagId: string;
        }, "tagId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceEnvironmentParams & {
            tagId: string;
        }, "spaceId" | "environmentId">>, version: number) => Promise<any>;
    };
    organization: {
        getAll: () => Promise<import("../common-types").CollectionProp<import("../export-types").OrganizationProp>>;
        get: (params: Pick<import("./endpoints/common-types").GetOrganizationParams, never> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams, "organizationId">>) => Promise<import("../export-types").OrganizationProp>;
    };
    organizationInvitation: {
        get: (params: Pick<{
            organizationId: string;
            invitationId: string;
        }, "invitationId"> & Partial<Pick<{
            organizationId: string;
            invitationId: string;
        }, "organizationId">>, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").OrganizationInvitationProps>;
        create: (params: Pick<{
            organizationId: string;
        }, never> & Partial<Pick<{
            organizationId: string;
        }, "organizationId">>, data: Pick<import("../export-types").OrganizationInvitationProps, "firstName" | "lastName" | "email" | "role">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").OrganizationInvitationProps>;
    };
    organizationMembership: {
        get: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & {
            organizationMembershipId: string;
        }, "organizationMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & {
            organizationMembershipId: string;
        }, "organizationId">>) => Promise<import("../export-types").OrganizationMembershipProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").OrganizationMembershipProps>>;
        update: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & {
            organizationMembershipId: string;
        }, "organizationMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & {
            organizationMembershipId: string;
        }, "organizationId">>, rawData: import("../export-types").OrganizationMembershipProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").OrganizationMembershipProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & {
            organizationMembershipId: string;
        }, "organizationMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & {
            organizationMembershipId: string;
        }, "organizationId">>) => Promise<any>;
    };
    spaceMember: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMemberId: string;
        }, "spaceMemberId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMemberId: string;
        }, "spaceId">>) => Promise<import("../export-types").SpaceMemberProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").SpaceMemberProps>>;
    };
    spaceMembership: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMembershipId: string;
        }, "spaceMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMembershipId: string;
        }, "spaceId">>) => Promise<import("../export-types").SpaceMembershipProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").SpaceMembershipProps>>;
        getForOrganization: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & {
            spaceMembershipId: string;
        }, "spaceMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & {
            spaceMembershipId: string;
        }, "organizationId">>) => Promise<import("../export-types").SpaceMembershipProps>;
        getManyForOrganization: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").SpaceMembershipProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceParams, never> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams, "spaceId">>, data: import("../export-types").CreateSpaceMembershipProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").SpaceMembershipProps>;
        createWithId: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMembershipId: string;
        }, "spaceMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMembershipId: string;
        }, "spaceId">>, data: import("../export-types").CreateSpaceMembershipProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").SpaceMembershipProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMembershipId: string;
        }, "spaceMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMembershipId: string;
        }, "spaceId">>, rawData: import("../export-types").SpaceMembershipProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").SpaceMembershipProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMembershipId: string;
        }, "spaceMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            spaceMembershipId: string;
        }, "spaceId">>) => Promise<any>;
    };
    team: {
        get: (params: Pick<import("./endpoints/common-types").GetTeamParams, "teamId"> & Partial<Pick<import("./endpoints/common-types").GetTeamParams, "organizationId">>) => Promise<import("../export-types").TeamProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").TeamProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetOrganizationParams, never> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams, "organizationId">>, rawData: Pick<import("../export-types").TeamProps, "description" | "name">, headers?: Record<string, unknown> | undefined) => Promise<any>;
        update: (params: Pick<import("./endpoints/common-types").GetTeamParams, "teamId"> & Partial<Pick<import("./endpoints/common-types").GetTeamParams, "organizationId">>, rawData: import("../export-types").TeamProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").TeamProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetTeamParams, "teamId"> & Partial<Pick<import("./endpoints/common-types").GetTeamParams, "organizationId">>) => Promise<any>;
    };
    teamMembership: {
        get: (params: Pick<import("./endpoints/common-types").GetTeamParams & {
            teamMembershipId: string;
        }, "teamId" | "teamMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetTeamParams & {
            teamMembershipId: string;
        }, "organizationId">>) => Promise<import("../export-types").TeamMembershipProps>;
        getManyForOrganization: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").TeamMembershipProps>>;
        getManyForTeam: (params: Pick<import("./endpoints/common-types").GetTeamParams & import("./endpoints/common-types").QueryParams, "query" | "teamId"> & Partial<Pick<import("./endpoints/common-types").GetTeamParams & import("./endpoints/common-types").QueryParams, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").TeamMembershipProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetTeamParams, "teamId"> & Partial<Pick<import("./endpoints/common-types").GetTeamParams, "organizationId">>, rawData: Pick<import("../export-types").TeamMembershipProps, "admin" | "organizationMembershipId">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").TeamMembershipProps>;
        update: (params: Pick<import("./endpoints/common-types").GetTeamParams & {
            teamMembershipId: string;
        }, "teamId" | "teamMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetTeamParams & {
            teamMembershipId: string;
        }, "organizationId">>, rawData: import("../export-types").TeamMembershipProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").TeamMembershipProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetTeamParams & {
            teamMembershipId: string;
        }, "teamId" | "teamMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetTeamParams & {
            teamMembershipId: string;
        }, "organizationId">>) => Promise<any>;
    };
    teamSpaceMembership: {
        get: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            teamSpaceMembershipId: string;
        }, "teamSpaceMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            teamSpaceMembershipId: string;
        }, "spaceId">>) => Promise<import("../export-types").TeamSpaceMembershipProps>;
        getMany: (params: Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "query"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & import("./endpoints/common-types").QueryParams, "spaceId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").TeamSpaceMembershipProps>>;
        getForOrganization: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & {
            teamSpaceMembershipId: string;
        }, "teamSpaceMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & {
            teamSpaceMembershipId: string;
        }, "organizationId">>) => Promise<import("../export-types").TeamSpaceMembershipProps>;
        getManyForOrganization: (params: Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams & {
            teamId?: string | undefined;
        }, "query" | "teamId"> & Partial<Pick<import("./endpoints/common-types").GetOrganizationParams & import("./endpoints/common-types").QueryParams & {
            teamId?: string | undefined;
        }, "organizationId">>) => Promise<import("../common-types").CollectionProp<import("../export-types").TeamSpaceMembershipProps>>;
        create: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            teamId: string;
        }, "teamId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            teamId: string;
        }, "spaceId">>, rawData: Pick<import("../export-types").TeamSpaceMembershipProps, "admin" | "roles">, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").TeamSpaceMembershipProps>;
        update: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            teamSpaceMembershipId: string;
        }, "teamSpaceMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            teamSpaceMembershipId: string;
        }, "spaceId">>, rawData: import("../export-types").TeamSpaceMembershipProps, headers?: Record<string, unknown> | undefined) => Promise<import("../export-types").TeamSpaceMembershipProps>;
        delete: (params: Pick<import("./endpoints/common-types").GetSpaceParams & {
            teamSpaceMembershipId: string;
        }, "teamSpaceMembershipId"> & Partial<Pick<import("./endpoints/common-types").GetSpaceParams & {
            teamSpaceMembershipId: string;
        }, "spaceId">>) => Promise<any>;
    };
};
